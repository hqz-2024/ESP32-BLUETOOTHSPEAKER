╔════════════════════════════════════════════════════════════════════════════╗
║                    PCA9554A I2C 地址对照表                                 ║
║                                                                            ║
║  你的硬件配置：A2=0, A1=0, A0=0 (全部接地)                                ║
╚════════════════════════════════════════════════════════════════════════════╝

┌────────────────────────────────────────────────────────────────────────────┐
│ 1. 地址格式说明                                                            │
└────────────────────────────────────────────────────────────────────────────┘

  PCA9554A 的 8 位地址结构：
  
  ┌─────────────────┬─────────────┬─────┐
  │  固定前缀       │  地址引脚   │ R/W │
  │  0 1 1 1 0      │  A2 A1 A0   │     │
  └─────────────────┴─────────────┴─────┘
    Bit 7 6 5 4 3    Bit 2 1 0    Bit 0


┌────────────────────────────────────────────────────────────────────────────┐
│ 2. 你的设备地址（A2=A1=A0=0）                                             │
└────────────────────────────────────────────────────────────────────────────┘

  ┌──────────────┬──────────────────┬──────────────────┬──────────────────┐
  │   地址类型   │    二进制        │    十六进制      │   Arduino 使用   │
  ├──────────────┼──────────────────┼──────────────────┼──────────────────┤
  │ 8位写地址    │  0111 0000       │      0x70        │       ❌         │
  │ 8位读地址    │  0111 0001       │      0x71        │       ❌         │
  │ 7位地址      │  0011 1000       │      0x38        │       ✅         │
  └──────────────┴──────────────────┴──────────────────┴──────────────────┘

  ⚠️  在 Arduino 代码中必须使用 7 位地址：0x38


┌────────────────────────────────────────────────────────────────────────────┐
│ 3. 地址转换公式                                                            │
└────────────────────────────────────────────────────────────────────────────┘

  从 8 位地址转换到 7 位地址：
  
    7位地址 = 8位地址 >> 1
    
    0x38 = 0x70 >> 1
    
    0011 1000 = 0111 0000 >> 1
         ↑           ↑
      7位地址     8位写地址


  从 7 位地址转换到 8 位地址：
  
    8位写地址 = (7位地址 << 1) | 0
    8位读地址 = (7位地址 << 1) | 1
    
    0x70 = (0x38 << 1) | 0
    0x71 = (0x38 << 1) | 1


┌────────────────────────────────────────────────────────────────────────────┐
│ 4. 完整地址对照表（所有可能的 A2/A1/A0 组合）                             │
└────────────────────────────────────────────────────────────────────────────┘

  ┌─────┬─────┬─────┬──────────┬──────────┬──────────┬──────────────────┐
  │ A2  │ A1  │ A0  │ 7位地址  │ 8位写址  │ 8位读址  │   Arduino 使用   │
  ├─────┼─────┼─────┼──────────┼──────────┼──────────┼──────────────────┤
  │  0  │  0  │  0  │   0x38   │   0x70   │   0x71   │  ✅ 你的配置     │
  │  0  │  0  │  1  │   0x39   │   0x72   │   0x73   │                  │
  │  0  │  1  │  0  │   0x3A   │   0x74   │   0x75   │                  │
  │  0  │  1  │  1  │   0x3B   │   0x76   │   0x77   │                  │
  │  1  │  0  │  0  │   0x3C   │   0x78   │   0x79   │                  │
  │  1  │  0  │  1  │   0x3D   │   0x7A   │   0x7B   │                  │
  │  1  │  1  │  0  │   0x3E   │   0x7C   │   0x7D   │                  │
  │  1  │  1  │  1  │   0x3F   │   0x7E   │   0x7F   │                  │
  └─────┴─────┴─────┴──────────┴──────────┴──────────┴──────────────────┘


┌────────────────────────────────────────────────────────────────────────────┐
│ 5. Arduino 代码示例                                                        │
└────────────────────────────────────────────────────────────────────────────┘

  ✅ 正确写法：
  
    #include <Wire.h>
    
    #define PCA9554A_ADDR 0x38  // 使用 7 位地址
    
    void setup() {
      Wire.begin();
      
      // 读取配置寄存器
      Wire.beginTransmission(PCA9554A_ADDR);  // Wire 自动发送 0x70
      Wire.write(0x03);                       // 寄存器地址
      Wire.endTransmission();
      
      Wire.requestFrom(PCA9554A_ADDR, 1);     // Wire 自动发送 0x71
      uint8_t config = Wire.read();
    }


  ❌ 错误写法：
  
    #define PCA9554A_ADDR 0x70  // 错误！这是 8 位地址
    
    Wire.beginTransmission(0x70);  // Wire 会发送 0xE0，地址错误！


┌────────────────────────────────────────────────────────────────────────────┐
│ 6. 为什么会有这个差异？                                                   │
└────────────────────────────────────────────────────────────────────────────┘

  I2C 协议规定：
  
    • 总线上传输的是 8 位地址（包含 R/W 位）
    • 规格书通常给出 8 位地址
  
  Arduino Wire 库设计：
  
    • 为了简化编程，使用 7 位地址
    • Wire 库自动添加 R/W 位
    • 这是大多数 I2C 库的标准做法
  
  好处：
  
    • 程序员不需要关心读写位
    • 代码更简洁
    • 避免混淆


┌────────────────────────────────────────────────────────────────────────────┐
│ 7. 关于 0x7E "干扰地址"                                                   │
└────────────────────────────────────────────────────────────────────────────┘

  你提到扫描到 0x7E，这可能是：
  
    1. 总线噪声干扰
    2. 时序不稳定
    3. 上拉电阻问题
    4. 线路接触不良
  
  验证方法：
  
    • 多次扫描，看是否稳定出现
    • 真实设备应该每次都能扫描到
    • 干扰地址会时有时无
  
  注意：0x7E 对应 8 位地址 0xFC/0xFD
        这不是 PCA9554A 的有效地址


┌────────────────────────────────────────────────────────────────────────────┐
│ 8. PCA9554 vs PCA9554A 区别                                                │
└────────────────────────────────────────────────────────────────────────────┘

  ┌──────────────┬──────────────┬──────────────┬──────────────────────┐
  │   型号       │  固定前缀    │  7位地址范围 │   8位写地址范围      │
  ├──────────────┼──────────────┼──────────────┼──────────────────────┤
  │  PCA9554     │   00100      │  0x20-0x27   │   0x40-0x4E          │
  │  PCA9554A    │   01110      │  0x38-0x3F   │   0x70-0x7E          │
  └──────────────┴──────────────┴──────────────┴──────────────────────┘
  
  你的芯片是 PCA9554A（固定前缀 01110）


┌────────────────────────────────────────────────────────────────────────────┐
│ 9. 快速检查清单                                                            │
└────────────────────────────────────────────────────────────────────────────┘

  ✅ 扫描到 0x38 - 正常！这是正确的 7 位地址
  ✅ 规格书写 0x70/0x71 - 正常！这是 8 位地址
  ✅ Arduino 代码用 0x38 - 正确！
  ❌ Arduino 代码用 0x70 - 错误！会导致通讯失败
  
  ⚠️  0x7E 干扰地址 - 需要检查硬件连接和上拉电阻


┌────────────────────────────────────────────────────────────────────────────┐
│ 10. 总结                                                                   │
└────────────────────────────────────────────────────────────────────────────┘

  ✨ 关键结论：
  
    • 0x38 不是错误地址，而是正确的 7 位地址
    • 没有时序问题，这是地址格式的正常差异
    • 在 Arduino 中始终使用 7 位地址
    • Wire 库会自动处理 R/W 位
  
  📝 记住：
  
    规格书地址 0x70 → Arduino 使用 0x38
    
    转换公式：0x38 = 0x70 >> 1


╔════════════════════════════════════════════════════════════════════════════╗
║  如有疑问，请运行 I2C-TEST 程序查看详细的地址分析                         ║
╚════════════════════════════════════════════════════════════════════════════╝

